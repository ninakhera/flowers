import cv2
import numpy as np         
import os                  
from random import shuffle 
from tqdm import tqdm

DATA = 'X:/Kaggle_Data/Flowers_Recognition/flowers'
IMG_SIZE = 50
LR = 1e-3

MODEL_NAME = 'flowerdifferentiation-{}-{}.model'.format(LR, '2conv-basic')

def label_img(img):
    sunflower = 'X:/Kaggle_Data/Flowers_Recognition/flowers/sunflower'
    daisy = 'X:/Kaggle_Data/Flowers_Recognition/flowers/daisy'
    dandelion = 'X:/Kaggle_Data/Flowers_Recognition/flowers/dandelion'
    rose = 'X:/Kaggle_Data/Flowers_Recognition/flowers/rose'
    tulip = 'X:/Kaggle_Data/Flowers_Recognition/flowers/tulip'

def create_data():
    data: []
    for img in tqdm(os.listdir(DATA)):
        label = label_img(img)
        path = os.path.join(DATA,img)
        img = cv2.imread(path, cv2.IMREAD_GRAYSCALE, (IMG_SIZE,IMG_SIZE))
        training_data.append([np.array(img), np.array(label)])
        shuffle(training_data)
        np.save('data.npy', data)
        return data
        
import tensorflow as tf
tf.reset_default_graph()
import tflearn
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.estimator import regression

convnet = input_data(shape=[None, IMG_SIZE, IMG_SIZE, 1], name='input')

convnet = conv_2d(convnet, 32, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)

convnet = conv_2d(convnet, 64, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)

convnet = conv_2d(convnet, 128, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)

convnet = conv_2d(convnet, 64, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)

convnet = conv_2d(convnet, 32, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)

convnet = fully_connected(convnet, 1024, activation='relu')
convnet = dropout(convnet, 0.8)

convnet = fully_connected(convnet, 2, activation='softmax')
convnet = regression(convnet, optimizer='adam', learning_rate=LR, loss='categorical_crossentropy', name='targets')

model = tflearn.DNN(convnet, tensorboard_dir='log')

if os.path.exists('{}.meta'.format(MODEL_NAME)):
    model.load(MODEL_NAME)
    print('model loaded!')
        
X = np.array([i[0] for i in train]).reshape(-1,IMG_SIZE,IMG_SIZE,1)
Y = [i[1] for i in train]

test_x = np.array([i[0] for i in test]).reshape(-1,IMG_SIZE,IMG_SIZE,1)
test_y = [i[1] for i in test]
